doctype html
html(lang='en')
  head
    meta(charset='utf-8')
    meta(name='viewport' content='width=device-width,initial-scale=1.0')
    title = title
    meta(name='description' content=description)
    meta(name='robots' content='noindex,nofollow')
  body
    nav#navigation-menu
      each navItem in mainNavItems
        a(href=url) = text.toUpperCase()

    main
      h1 Hello #{ (user || {}).name || 'there' }!
      p You're looking at a page that is written exclusively for benchmarking purposes.
      p A bit of explanation: this benchmark is run in two different ways.
      ul
        li The template <em>compilation</em> is measured. This indicates how fast the templating engine can turn a file like this in a reusable function. Usually, contentful templates like this are only compiled once, but for layouts or includes/partials, they are often rendered many times with different input data.
        li That segues nicely into the next benchmark; the speed of said reusable function. How fast does the compiled function spit out the rendered output when called with some set of properties?

      p In order to test the speed of the templating languages themselves, here's a binary search implementation.

      - const searchTarget = 23
      input(readonly value=searchTarget)

      - let start = 0
      - let end = searchArray.length
      while start < end - 1
        - const middle = Math.floor(start + (end - start) / 2)
        if searchTarget < searchArray[middle]
          - end = middle
        else
          - start = middle
      - const targetIndex = start

    Output: <output>#{ targetIndex }</output>

    p This templating language uses <code>#&#x7B; and <code>} for interpolation. There are two main ways to escape them if you need them literally:

    ol
      li Through <code>#{`#{\` … \`}`}</code>, or
      li Through character escaping, such as <code>#&amp;#x7B; … } in HTML.
